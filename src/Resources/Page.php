<?php

namespace PlaywrightPhp\Resources;

use PlaywrightPhp\Traits\AliasesEvaluationMethods;
use PlaywrightPhp\Traits\AliasesSelectionMethods;

/**
 * @property $accessibility: \PlaywrightPhp\Resources\Accessibility
 * @property $clock: \PlaywrightPhp\Resources\Clock
 * @property $coverage: \PlaywrightPhp\Resources\Coverage
 * @property $keyboard: \PlaywrightPhp\Resources\Keyboard
 * @property $mouse: \PlaywrightPhp\Resources\Mouse
 * @property $request: \PlaywrightPhp\Resources\APIRequestContext
 * @property $touchscreen: \PlaywrightPhp\Resources\Touchscreen
 * @method mixed evaluate(\Nesk\Rialto\Data\JsFunction $pageFunction, mixed $arg = null)
 * @method-extended mixed evaluate(callable|\Nesk\Rialto\Data\JsFunction $pageFunction, mixed $arg = null)
 * @method mixed evaluateHandle(\Nesk\Rialto\Data\JsFunction $pageFunction, mixed $arg = null)
 * @method-extended mixed evaluateHandle(callable|\Nesk\Rialto\Data\JsFunction $pageFunction, mixed $arg = null)
 * @method void addInitScript(mixed|array $script, mixed $arg = null)
 * @method-extended void addInitScript(mixed|array{ $path: string, $content: string } $script, mixed $arg = null)
 * @method mixed waitForFunction(\Nesk\Rialto\Data\JsFunction $pageFunction, mixed $arg = null, \PlaywrightPhp\Resources\PageWaitForFunctionOptions $options = null)
 * @method-extended mixed waitForFunction(callable|\Nesk\Rialto\Data\JsFunction $pageFunction, mixed $arg = null, \PlaywrightPhp\Resources\PageWaitForFunctionOptions $options = null)
 * @method null|\PlaywrightPhp\Resources\ElementHandle|mixed[] waitForSelector(string $selector, \PlaywrightPhp\Resources\PageWaitForSelectorOptions $options)
 * @method-extended null|\PlaywrightPhp\Resources\ElementHandle|mixed[] waitForSelector(string $selector, \PlaywrightPhp\Resources\PageWaitForSelectorOptions $options)
 * @method void exposeBinding(string $name, \Nesk\Rialto\Data\JsFunction $playwrightBinding, array $options = [])
 * @method-extended void exposeBinding(string $name, callable(mixed $source, mixed ...$args): mixed|\Nesk\Rialto\Data\JsFunction $playwrightBinding, array{ $handle: bool } $options = null)
 * @method void removeAllListeners(string|null $type, array $options)
 * @method-extended void removeAllListeners(string|null $type, array{ $behavior: string } $options)
 * @method mixed on('worker' $event, \Nesk\Rialto\Data\JsFunction $listener)
 * @method-extended mixed on('worker' $event, callable(\PlaywrightPhp\Resources\Worker $worker): mixed|\Nesk\Rialto\Data\JsFunction $listener)
 * @method mixed once('worker' $event, \Nesk\Rialto\Data\JsFunction $listener)
 * @method-extended mixed once('worker' $event, callable(\PlaywrightPhp\Resources\Worker $worker): mixed|\Nesk\Rialto\Data\JsFunction $listener)
 * @method mixed addListener('worker' $event, \Nesk\Rialto\Data\JsFunction $listener)
 * @method-extended mixed addListener('worker' $event, callable(\PlaywrightPhp\Resources\Worker $worker): mixed|\Nesk\Rialto\Data\JsFunction $listener)
 * @method mixed removeListener('worker' $event, \Nesk\Rialto\Data\JsFunction $listener)
 * @method-extended mixed removeListener('worker' $event, callable(\PlaywrightPhp\Resources\Worker $worker): mixed|\Nesk\Rialto\Data\JsFunction $listener)
 * @method mixed off('worker' $event, \Nesk\Rialto\Data\JsFunction $listener)
 * @method-extended mixed off('worker' $event, callable(\PlaywrightPhp\Resources\Worker $worker): mixed|\Nesk\Rialto\Data\JsFunction $listener)
 * @method mixed prependListener('worker' $event, \Nesk\Rialto\Data\JsFunction $listener)
 * @method-extended mixed prependListener('worker' $event, callable(\PlaywrightPhp\Resources\Worker $worker): mixed|\Nesk\Rialto\Data\JsFunction $listener)
 * @method void addLocatorHandler(\PlaywrightPhp\Resources\Locator $locator, \Nesk\Rialto\Data\JsFunction $handler, array $options = [])
 * @method-extended void addLocatorHandler(\PlaywrightPhp\Resources\Locator $locator, callable(callable(\PlaywrightPhp\Resources\Locator $locator): Promise|mixed[]|\Nesk\Rialto\Data\JsFunction): |\Nesk\Rialto\Data\JsFunction $handler, array{ $noWaitAfter: bool, $times: float } $options = null)
 * @method \PlaywrightPhp\Resources\ElementHandle addScriptTag(array $options = [])
 * @method-extended \PlaywrightPhp\Resources\ElementHandle addScriptTag(array{ $content: string, $path: string, $type: string, $url: string } $options = null)
 * @method \PlaywrightPhp\Resources\ElementHandle addStyleTag(array $options = [])
 * @method-extended \PlaywrightPhp\Resources\ElementHandle addStyleTag(array{ $content: string, $path: string, $url: string } $options = null)
 * @method void bringToFront()
 * @method-extended void bringToFront()
 * @method void check(string $selector, array $options = [])
 * @method-extended void check(string $selector, array{ $force: bool, $noWaitAfter: bool, $position: array{ $x: float, $y: float }, $strict: bool, $timeout: float, $trial: bool } $options = null)
 * @method void click(string $selector, array $options = [])
 * @method-extended void click(string $selector, array{ $button: string, $clickCount: float, $delay: float, $force: bool, $modifiers: mixed, $noWaitAfter: bool, $position: array{ $x: float, $y: float }, $strict: bool, $timeout: float, $trial: bool } $options = null)
 * @method void close(array $options = [])
 * @method-extended void close(array{ $reason: string, $runBeforeUnload: bool } $options = null)
 * @method string content()
 * @method-extended string content()
 * @method \PlaywrightPhp\Resources\BrowserContext context()
 * @method-extended \PlaywrightPhp\Resources\BrowserContext context()
 * @method void dblclick(string $selector, array $options = [])
 * @method-extended void dblclick(string $selector, array{ $button: string, $delay: float, $force: bool, $modifiers: mixed, $noWaitAfter: bool, $position: array{ $x: float, $y: float }, $strict: bool, $timeout: float, $trial: bool } $options = null)
 * @method void dispatchEvent(string $selector, string $type, mixed $eventInit = null, array $options = [])
 * @method-extended void dispatchEvent(string $selector, string $type, mixed $eventInit = null, array{ $strict: bool, $timeout: float } $options = null)
 * @method void dragAndDrop(string $source, string $target, array $options = [])
 * @method-extended void dragAndDrop(string $source, string $target, array{ $force: bool, $noWaitAfter: bool, $sourcePosition: array{ $x: float, $y: float }, $strict: bool, $targetPosition: array{ $x: float, $y: float }, $timeout: float, $trial: bool } $options = null)
 * @method void emulateMedia(array $options = [])
 * @method-extended void emulateMedia(array{ $colorScheme: null|'light'|'dark'|'no-preference', $forcedColors: null|'active'|'none', $media: null|'screen'|'print', $reducedMotion: null|'reduce'|'no-preference' } $options = null)
 * @method void exposeFunction(string $name, \Nesk\Rialto\Data\JsFunction $callback)
 * @method-extended void exposeFunction(string $name, callable|\Nesk\Rialto\Data\JsFunction $callback)
 * @method void fill(string $selector, string $value, array $options = [])
 * @method-extended void fill(string $selector, string $value, array{ $force: bool, $noWaitAfter: bool, $strict: bool, $timeout: float } $options = null)
 * @method void focus(string $selector, array $options = [])
 * @method-extended void focus(string $selector, array{ $strict: bool, $timeout: float } $options = null)
 * @method null|\PlaywrightPhp\Resources\Frame frame(string|array $frameSelector)
 * @method-extended null|\PlaywrightPhp\Resources\Frame frame(string|array{ $name: string, $url: string|mixed|callable(callable(mixed $url): bool|\Nesk\Rialto\Data\JsFunction): |\Nesk\Rialto\Data\JsFunction } $frameSelector)
 * @method \PlaywrightPhp\Resources\FrameLocator frameLocator(string $selector)
 * @method-extended \PlaywrightPhp\Resources\FrameLocator frameLocator(string $selector)
 * @method mixed frames()
 * @method-extended mixed frames()
 * @method null|string getAttribute(string $selector, string $name, array $options = [])
 * @method-extended null|string getAttribute(string $selector, string $name, array{ $strict: bool, $timeout: float } $options = null)
 * @method \PlaywrightPhp\Resources\Locator getByAltText(string|mixed $text, array $options = [])
 * @method-extended \PlaywrightPhp\Resources\Locator getByAltText(string|mixed $text, array{ $exact: bool } $options = null)
 * @method \PlaywrightPhp\Resources\Locator getByLabel(string|mixed $text, array $options = [])
 * @method-extended \PlaywrightPhp\Resources\Locator getByLabel(string|mixed $text, array{ $exact: bool } $options = null)
 * @method \PlaywrightPhp\Resources\Locator getByPlaceholder(string|mixed $text, array $options = [])
 * @method-extended \PlaywrightPhp\Resources\Locator getByPlaceholder(string|mixed $text, array{ $exact: bool } $options = null)
 * @method \PlaywrightPhp\Resources\Locator getByRole(string $role, array $options = [])
 * @method-extended \PlaywrightPhp\Resources\Locator getByRole(string $role, array{ $checked: bool, $disabled: bool, $exact: bool, $expanded: bool, $includeHidden: bool, $level: float, $name: string|mixed, $pressed: bool, $selected: bool } $options = null)
 * @method \PlaywrightPhp\Resources\Locator getByTestId(string|mixed $testId)
 * @method-extended \PlaywrightPhp\Resources\Locator getByTestId(string|mixed $testId)
 * @method \PlaywrightPhp\Resources\Locator getByText(string|mixed $text, array $options = [])
 * @method-extended \PlaywrightPhp\Resources\Locator getByText(string|mixed $text, array{ $exact: bool } $options = null)
 * @method \PlaywrightPhp\Resources\Locator getByTitle(string|mixed $text, array $options = [])
 * @method-extended \PlaywrightPhp\Resources\Locator getByTitle(string|mixed $text, array{ $exact: bool } $options = null)
 * @method null|\PlaywrightPhp\Resources\Response goBack(array $options = [])
 * @method-extended null|\PlaywrightPhp\Resources\Response goBack(array{ $timeout: float, $waitUntil: string } $options = null)
 * @method null|\PlaywrightPhp\Resources\Response goForward(array $options = [])
 * @method-extended null|\PlaywrightPhp\Resources\Response goForward(array{ $timeout: float, $waitUntil: string } $options = null)
 * @method null|\PlaywrightPhp\Resources\Response goto(string $url, array $options = [])
 * @method-extended null|\PlaywrightPhp\Resources\Response goto(string $url, array{ $referer: string, $timeout: float, $waitUntil: string } $options = null)
 * @method void hover(string $selector, array $options = [])
 * @method-extended void hover(string $selector, array{ $force: bool, $modifiers: mixed, $noWaitAfter: bool, $position: array{ $x: float, $y: float }, $strict: bool, $timeout: float, $trial: bool } $options = null)
 * @method string innerHTML(string $selector, array $options = [])
 * @method-extended string innerHTML(string $selector, array{ $strict: bool, $timeout: float } $options = null)
 * @method string innerText(string $selector, array $options = [])
 * @method-extended string innerText(string $selector, array{ $strict: bool, $timeout: float } $options = null)
 * @method string inputValue(string $selector, array $options = [])
 * @method-extended string inputValue(string $selector, array{ $strict: bool, $timeout: float } $options = null)
 * @method bool isChecked(string $selector, array $options = [])
 * @method-extended bool isChecked(string $selector, array{ $strict: bool, $timeout: float } $options = null)
 * @method bool isClosed()
 * @method-extended bool isClosed()
 * @method bool isDisabled(string $selector, array $options = [])
 * @method-extended bool isDisabled(string $selector, array{ $strict: bool, $timeout: float } $options = null)
 * @method bool isEditable(string $selector, array $options = [])
 * @method-extended bool isEditable(string $selector, array{ $strict: bool, $timeout: float } $options = null)
 * @method bool isEnabled(string $selector, array $options = [])
 * @method-extended bool isEnabled(string $selector, array{ $strict: bool, $timeout: float } $options = null)
 * @method bool isHidden(string $selector, array $options = [])
 * @method-extended bool isHidden(string $selector, array{ $strict: bool, $timeout: float } $options = null)
 * @method bool isVisible(string $selector, array $options = [])
 * @method-extended bool isVisible(string $selector, array{ $strict: bool, $timeout: float } $options = null)
 * @method \PlaywrightPhp\Resources\Locator locator(string $selector, array $options = [])
 * @method-extended \PlaywrightPhp\Resources\Locator locator(string $selector, array{ $has: \PlaywrightPhp\Resources\Locator, $hasNot: \PlaywrightPhp\Resources\Locator, $hasNotText: string|mixed, $hasText: string|mixed } $options = null)
 * @method \PlaywrightPhp\Resources\Frame mainFrame()
 * @method-extended \PlaywrightPhp\Resources\Frame mainFrame()
 * @method null|\PlaywrightPhp\Resources\Page opener()
 * @method-extended null|\PlaywrightPhp\Resources\Page opener()
 * @method void pause()
 * @method-extended void pause()
 * @method mixed pdf(array $options = [])
 * @method-extended mixed pdf(array{ $displayHeaderFooter: bool, $footerTemplate: string, $format: string, $headerTemplate: string, $height: string|float, $landscape: bool, $margin: array{ $top: string|float, $right: string|float, $bottom: string|float, $left: string|float }, $outline: bool, $pageRanges: string, $path: string, $preferCSSPageSize: bool, $printBackground: bool, $scale: float, $tagged: bool, $width: string|float } $options = null)
 * @method void press(string $selector, string $key, array $options = [])
 * @method-extended void press(string $selector, string $key, array{ $delay: float, $noWaitAfter: bool, $strict: bool, $timeout: float } $options = null)
 * @method null|\PlaywrightPhp\Resources\Response reload(array $options = [])
 * @method-extended null|\PlaywrightPhp\Resources\Response reload(array{ $timeout: float, $waitUntil: string } $options = null)
 * @method void removeLocatorHandler(\PlaywrightPhp\Resources\Locator $locator)
 * @method-extended void removeLocatorHandler(\PlaywrightPhp\Resources\Locator $locator)
 * @method void requestGC()
 * @method-extended void requestGC()
 * @method void route(string|mixed|\Nesk\Rialto\Data\JsFunction $url, \Nesk\Rialto\Data\JsFunction $handler, array $options = [])
 * @method-extended void route(string|mixed|callable(callable(mixed $url): bool|\Nesk\Rialto\Data\JsFunction): |\Nesk\Rialto\Data\JsFunction $url, callable(callable(\PlaywrightPhp\Resources\Route $route, \PlaywrightPhp\Resources\Request $request): Promise|mixed[]|mixed|\Nesk\Rialto\Data\JsFunction): |\Nesk\Rialto\Data\JsFunction $handler, array{ $times: float } $options = null)
 * @method void routeFromHAR(string $har, array $options = [])
 * @method-extended void routeFromHAR(string $har, array{ $notFound: string, $update: bool, $updateContent: string, $updateMode: string, $url: string|mixed } $options = null)
 * @method void routeWebSocket(string|mixed|\Nesk\Rialto\Data\JsFunction $url, \Nesk\Rialto\Data\JsFunction $handler)
 * @method-extended void routeWebSocket(string|mixed|callable(callable(mixed $url): bool|\Nesk\Rialto\Data\JsFunction): |\Nesk\Rialto\Data\JsFunction $url, callable(callable(\PlaywrightPhp\Resources\WebSocketRoute $websocketroute): Promise|mixed[]|mixed|\Nesk\Rialto\Data\JsFunction): |\Nesk\Rialto\Data\JsFunction $handler)
 * @method mixed screenshot(\PlaywrightPhp\Resources\PageScreenshotOptions $options = null)
 * @method-extended mixed screenshot(\PlaywrightPhp\Resources\PageScreenshotOptions $options = null)
 * @method mixed selectOption(string $selector, null|string|\PlaywrightPhp\Resources\ElementHandle|mixed|array $values, array $options = [])
 * @method-extended mixed selectOption(string $selector, null|string|\PlaywrightPhp\Resources\ElementHandle|mixed|array{ $value: string, $label: string, $index: float } $values, array{ $force: bool, $noWaitAfter: bool, $strict: bool, $timeout: float } $options = null)
 * @method void setChecked(string $selector, bool $checked, array $options = [])
 * @method-extended void setChecked(string $selector, bool $checked, array{ $force: bool, $noWaitAfter: bool, $position: array{ $x: float, $y: float }, $strict: bool, $timeout: float, $trial: bool } $options = null)
 * @method void setContent(string $html, array $options = [])
 * @method-extended void setContent(string $html, array{ $timeout: float, $waitUntil: string } $options = null)
 * @method void setDefaultNavigationTimeout(float $timeout)
 * @method-extended void setDefaultNavigationTimeout(float $timeout)
 * @method void setDefaultTimeout(float $timeout)
 * @method-extended void setDefaultTimeout(float $timeout)
 * @method void setExtraHTTPHeaders(array $headers)
 * @method-extended void setExtraHTTPHeaders(array{  } $headers)
 * @method void setInputFiles(string $selector, string|mixed|array $files, array $options = [])
 * @method-extended void setInputFiles(string $selector, string|mixed|array{ $name: string, $mimeType: string, $buffer: mixed } $files, array{ $noWaitAfter: bool, $strict: bool, $timeout: float } $options = null)
 * @method void setViewportSize(array $viewportSize)
 * @method-extended void setViewportSize(array{ $width: float, $height: float } $viewportSize)
 * @method void tap(string $selector, array $options = [])
 * @method-extended void tap(string $selector, array{ $force: bool, $modifiers: mixed, $noWaitAfter: bool, $position: array{ $x: float, $y: float }, $strict: bool, $timeout: float, $trial: bool } $options = null)
 * @method null|string textContent(string $selector, array $options = [])
 * @method-extended null|string textContent(string $selector, array{ $strict: bool, $timeout: float } $options = null)
 * @method string title()
 * @method-extended string title()
 * @method void type(string $selector, string $text, array $options = [])
 * @method-extended void type(string $selector, string $text, array{ $delay: float, $noWaitAfter: bool, $strict: bool, $timeout: float } $options = null)
 * @method void uncheck(string $selector, array $options = [])
 * @method-extended void uncheck(string $selector, array{ $force: bool, $noWaitAfter: bool, $position: array{ $x: float, $y: float }, $strict: bool, $timeout: float, $trial: bool } $options = null)
 * @method void unroute(string|mixed|\Nesk\Rialto\Data\JsFunction $url, \Nesk\Rialto\Data\JsFunction $handler = null)
 * @method-extended void unroute(string|mixed|callable(callable(mixed $url): bool|\Nesk\Rialto\Data\JsFunction): |\Nesk\Rialto\Data\JsFunction $url, callable(callable(\PlaywrightPhp\Resources\Route $route, \PlaywrightPhp\Resources\Request $request): Promise|mixed[]|mixed|\Nesk\Rialto\Data\JsFunction): |\Nesk\Rialto\Data\JsFunction $handler = null)
 * @method void unrouteAll(array $options = [])
 * @method-extended void unrouteAll(array{ $behavior: string } $options = null)
 * @method string url()
 * @method-extended string url()
 * @method null|\PlaywrightPhp\Resources\Video video()
 * @method-extended null|\PlaywrightPhp\Resources\Video video()
 * @method null|array viewportSize()
 * @method-extended null|array{ $width: float, $height: float } viewportSize()
 * @method \PlaywrightPhp\Resources\Worker waitForEvent('worker' $event, array|\Nesk\Rialto\Data\JsFunction $optionsOrPredicate = null)
 * @method-extended \PlaywrightPhp\Resources\Worker waitForEvent('worker' $event, array{ $predicate: callable(\PlaywrightPhp\Resources\Worker $worker): bool|Promise|bool[]|\Nesk\Rialto\Data\JsFunction, $timeout: float }|callable(callable(\PlaywrightPhp\Resources\Worker $worker): bool|Promise|bool[]|\Nesk\Rialto\Data\JsFunction): |\Nesk\Rialto\Data\JsFunction $optionsOrPredicate = null)
 * @method void waitForLoadState(string $state = null, array $options = [])
 * @method-extended void waitForLoadState(string $state = null, array{ $timeout: float } $options = null)
 * @method null|\PlaywrightPhp\Resources\Response waitForNavigation(array $options = [])
 * @method-extended null|\PlaywrightPhp\Resources\Response waitForNavigation(array{ $timeout: float, $url: string|mixed|callable(callable(mixed $url): bool|\Nesk\Rialto\Data\JsFunction): |\Nesk\Rialto\Data\JsFunction, $waitUntil: string } $options = null)
 * @method \PlaywrightPhp\Resources\Request waitForRequest(string|mixed|\Nesk\Rialto\Data\JsFunction $urlOrPredicate, array $options = [])
 * @method-extended \PlaywrightPhp\Resources\Request waitForRequest(string|mixed|callable(callable(\PlaywrightPhp\Resources\Request $request): bool|Promise|bool[]|\Nesk\Rialto\Data\JsFunction): |\Nesk\Rialto\Data\JsFunction $urlOrPredicate, array{ $timeout: float } $options = null)
 * @method \PlaywrightPhp\Resources\Response waitForResponse(string|mixed|\Nesk\Rialto\Data\JsFunction $urlOrPredicate, array $options = [])
 * @method-extended \PlaywrightPhp\Resources\Response waitForResponse(string|mixed|callable(callable(\PlaywrightPhp\Resources\Response $response): bool|Promise|bool[]|\Nesk\Rialto\Data\JsFunction): |\Nesk\Rialto\Data\JsFunction $urlOrPredicate, array{ $timeout: float } $options = null)
 * @method void waitForTimeout(float $timeout)
 * @method-extended void waitForTimeout(float $timeout)
 * @method void waitForURL(string|mixed|\Nesk\Rialto\Data\JsFunction $url, array $options = [])
 * @method-extended void waitForURL(string|mixed|callable(callable(mixed $url): bool|\Nesk\Rialto\Data\JsFunction): |\Nesk\Rialto\Data\JsFunction $url, array{ $timeout: float, $waitUntil: string } $options = null)
 * @method mixed workers()
 * @method-extended mixed workers()
 */
class Page extends EventEmitter
{
    use AliasesEvaluationMethods;
    use AliasesSelectionMethods;
}
