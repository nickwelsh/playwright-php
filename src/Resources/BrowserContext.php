<?php

namespace PlaywrightPhp\Resources;

/**
 * @property $clock: \PlaywrightPhp\Resources\Clock
 * @property $request: \PlaywrightPhp\Resources\APIRequestContext
 * @property $tracing: \PlaywrightPhp\Resources\Tracing
 * @method void exposeBinding(string $name, \Nesk\Rialto\Data\JsFunction $playwrightBinding, array $options = [])
 * @method-extended void exposeBinding(string $name, callable(mixed $source, mixed ...$args): mixed|\Nesk\Rialto\Data\JsFunction $playwrightBinding, array{ $handle: bool } $options = null)
 * @method void addInitScript(mixed|array $script, mixed $arg = null)
 * @method-extended void addInitScript(mixed|array{ $path: string, $content: string } $script, mixed $arg = null)
 * @method void removeAllListeners(string|null $type, array $options)
 * @method-extended void removeAllListeners(string|null $type, array{ $behavior: string } $options)
 * @method mixed on('weberror' $event, \Nesk\Rialto\Data\JsFunction $listener)
 * @method-extended mixed on('weberror' $event, callable(\PlaywrightPhp\Resources\WebError $webError): mixed|\Nesk\Rialto\Data\JsFunction $listener)
 * @method mixed once('weberror' $event, \Nesk\Rialto\Data\JsFunction $listener)
 * @method-extended mixed once('weberror' $event, callable(\PlaywrightPhp\Resources\WebError $webError): mixed|\Nesk\Rialto\Data\JsFunction $listener)
 * @method mixed addListener('weberror' $event, \Nesk\Rialto\Data\JsFunction $listener)
 * @method-extended mixed addListener('weberror' $event, callable(\PlaywrightPhp\Resources\WebError $webError): mixed|\Nesk\Rialto\Data\JsFunction $listener)
 * @method mixed removeListener('weberror' $event, \Nesk\Rialto\Data\JsFunction $listener)
 * @method-extended mixed removeListener('weberror' $event, callable(\PlaywrightPhp\Resources\WebError $webError): mixed|\Nesk\Rialto\Data\JsFunction $listener)
 * @method mixed off('weberror' $event, \Nesk\Rialto\Data\JsFunction $listener)
 * @method-extended mixed off('weberror' $event, callable(\PlaywrightPhp\Resources\WebError $webError): mixed|\Nesk\Rialto\Data\JsFunction $listener)
 * @method mixed prependListener('weberror' $event, \Nesk\Rialto\Data\JsFunction $listener)
 * @method-extended mixed prependListener('weberror' $event, callable(\PlaywrightPhp\Resources\WebError $webError): mixed|\Nesk\Rialto\Data\JsFunction $listener)
 * @method void addCookies(mixed $cookies)
 * @method-extended void addCookies(mixed $cookies)
 * @method mixed backgroundPages()
 * @method-extended mixed backgroundPages()
 * @method null|\PlaywrightPhp\Resources\Browser browser()
 * @method-extended null|\PlaywrightPhp\Resources\Browser browser()
 * @method void clearCookies(array $options = [])
 * @method-extended void clearCookies(array{ $domain: string|mixed, $name: string|mixed, $path: string|mixed } $options = null)
 * @method void clearPermissions()
 * @method-extended void clearPermissions()
 * @method void close(array $options = [])
 * @method-extended void close(array{ $reason: string } $options = null)
 * @method mixed cookies(string|mixed $urls = null)
 * @method-extended mixed cookies(string|mixed $urls = null)
 * @method void exposeFunction(string $name, \Nesk\Rialto\Data\JsFunction $callback)
 * @method-extended void exposeFunction(string $name, callable|\Nesk\Rialto\Data\JsFunction $callback)
 * @method void grantPermissions(mixed $permissions, array $options = [])
 * @method-extended void grantPermissions(mixed $permissions, array{ $origin: string } $options = null)
 * @method \PlaywrightPhp\Resources\CDPSession newCDPSession(\PlaywrightPhp\Resources\Page|\PlaywrightPhp\Resources\Frame $page)
 * @method-extended \PlaywrightPhp\Resources\CDPSession newCDPSession(\PlaywrightPhp\Resources\Page|\PlaywrightPhp\Resources\Frame $page)
 * @method \PlaywrightPhp\Resources\Page newPage()
 * @method-extended \PlaywrightPhp\Resources\Page newPage()
 * @method mixed pages()
 * @method-extended mixed pages()
 * @method void route(string|mixed|\Nesk\Rialto\Data\JsFunction $url, \Nesk\Rialto\Data\JsFunction $handler, array $options = [])
 * @method-extended void route(string|mixed|callable(callable(mixed $url): bool|\Nesk\Rialto\Data\JsFunction): |\Nesk\Rialto\Data\JsFunction $url, callable(callable(\PlaywrightPhp\Resources\Route $route, \PlaywrightPhp\Resources\Request $request): Promise|mixed[]|mixed|\Nesk\Rialto\Data\JsFunction): |\Nesk\Rialto\Data\JsFunction $handler, array{ $times: float } $options = null)
 * @method void routeFromHAR(string $har, array $options = [])
 * @method-extended void routeFromHAR(string $har, array{ $notFound: string, $update: bool, $updateContent: string, $updateMode: string, $url: string|mixed } $options = null)
 * @method void routeWebSocket(string|mixed|\Nesk\Rialto\Data\JsFunction $url, \Nesk\Rialto\Data\JsFunction $handler)
 * @method-extended void routeWebSocket(string|mixed|callable(callable(mixed $url): bool|\Nesk\Rialto\Data\JsFunction): |\Nesk\Rialto\Data\JsFunction $url, callable(callable(\PlaywrightPhp\Resources\WebSocketRoute $websocketroute): Promise|mixed[]|mixed|\Nesk\Rialto\Data\JsFunction): |\Nesk\Rialto\Data\JsFunction $handler)
 * @method mixed serviceWorkers()
 * @method-extended mixed serviceWorkers()
 * @method void setDefaultNavigationTimeout(float $timeout)
 * @method-extended void setDefaultNavigationTimeout(float $timeout)
 * @method void setDefaultTimeout(float $timeout)
 * @method-extended void setDefaultTimeout(float $timeout)
 * @method void setExtraHTTPHeaders(array $headers)
 * @method-extended void setExtraHTTPHeaders(array{  } $headers)
 * @method void setGeolocation(null|array $geolocation)
 * @method-extended void setGeolocation(null|array{ $latitude: float, $longitude: float, $accuracy: float } $geolocation)
 * @method void setHTTPCredentials(null|array $httpCredentials)
 * @method-extended void setHTTPCredentials(null|array{ $username: string, $password: string } $httpCredentials)
 * @method void setOffline(bool $offline)
 * @method-extended void setOffline(bool $offline)
 * @method array storageState(array $options = [])
 * @method-extended array{ $cookies: mixed, $origins: mixed } storageState(array{ $path: string } $options = null)
 * @method void unroute(string|mixed|\Nesk\Rialto\Data\JsFunction $url, \Nesk\Rialto\Data\JsFunction $handler = null)
 * @method-extended void unroute(string|mixed|callable(callable(mixed $url): bool|\Nesk\Rialto\Data\JsFunction): |\Nesk\Rialto\Data\JsFunction $url, callable(callable(\PlaywrightPhp\Resources\Route $route, \PlaywrightPhp\Resources\Request $request): Promise|mixed[]|mixed|\Nesk\Rialto\Data\JsFunction): |\Nesk\Rialto\Data\JsFunction $handler = null)
 * @method void unrouteAll(array $options = [])
 * @method-extended void unrouteAll(array{ $behavior: string } $options = null)
 * @method \PlaywrightPhp\Resources\WebError waitForEvent('weberror' $event, array|\Nesk\Rialto\Data\JsFunction $optionsOrPredicate = null)
 * @method-extended \PlaywrightPhp\Resources\WebError waitForEvent('weberror' $event, array{ $predicate: callable(\PlaywrightPhp\Resources\WebError $webError): bool|Promise|bool[]|\Nesk\Rialto\Data\JsFunction, $timeout: float }|callable(callable(\PlaywrightPhp\Resources\WebError $webError): bool|Promise|bool[]|\Nesk\Rialto\Data\JsFunction): |\Nesk\Rialto\Data\JsFunction $optionsOrPredicate = null)
 */
class BrowserContext extends EventEmitter
{
}
