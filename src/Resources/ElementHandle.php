<?php

namespace PlaywrightPhp\Resources;

use PlaywrightPhp\Traits\AliasesEvaluationMethods;
use PlaywrightPhp\Traits\AliasesSelectionMethods;

/**
 * @method null|\PlaywrightPhp\Resources\ElementHandle|mixed[] waitForSelector(string $selector, \PlaywrightPhp\Resources\ElementHandleWaitForSelectorOptions $options)
 * @method-extended null|\PlaywrightPhp\Resources\ElementHandle|mixed[] waitForSelector(string $selector, \PlaywrightPhp\Resources\ElementHandleWaitForSelectorOptions $options)
 * @method null|array boundingBox()
 * @method-extended null|array{ $x: float, $y: float, $width: float, $height: float } boundingBox()
 * @method void check(array $options = [])
 * @method-extended void check(array{ $force: bool, $noWaitAfter: bool, $position: array{ $x: float, $y: float }, $timeout: float, $trial: bool } $options = null)
 * @method void click(array $options = [])
 * @method-extended void click(array{ $button: string, $clickCount: float, $delay: float, $force: bool, $modifiers: mixed, $noWaitAfter: bool, $position: array{ $x: float, $y: float }, $timeout: float, $trial: bool } $options = null)
 * @method null|\PlaywrightPhp\Resources\Frame contentFrame()
 * @method-extended null|\PlaywrightPhp\Resources\Frame contentFrame()
 * @method void dblclick(array $options = [])
 * @method-extended void dblclick(array{ $button: string, $delay: float, $force: bool, $modifiers: mixed, $noWaitAfter: bool, $position: array{ $x: float, $y: float }, $timeout: float, $trial: bool } $options = null)
 * @method void dispatchEvent(string $type, mixed $eventInit = null)
 * @method-extended void dispatchEvent(string $type, mixed $eventInit = null)
 * @method void fill(string $value, array $options = [])
 * @method-extended void fill(string $value, array{ $force: bool, $noWaitAfter: bool, $timeout: float } $options = null)
 * @method void focus()
 * @method-extended void focus()
 * @method null|string getAttribute(string $name)
 * @method-extended null|string getAttribute(string $name)
 * @method void hover(array $options = [])
 * @method-extended void hover(array{ $force: bool, $modifiers: mixed, $noWaitAfter: bool, $position: array{ $x: float, $y: float }, $timeout: float, $trial: bool } $options = null)
 * @method string innerHTML()
 * @method-extended string innerHTML()
 * @method string innerText()
 * @method-extended string innerText()
 * @method string inputValue(array $options = [])
 * @method-extended string inputValue(array{ $timeout: float } $options = null)
 * @method bool isChecked()
 * @method-extended bool isChecked()
 * @method bool isDisabled()
 * @method-extended bool isDisabled()
 * @method bool isEditable()
 * @method-extended bool isEditable()
 * @method bool isEnabled()
 * @method-extended bool isEnabled()
 * @method bool isHidden()
 * @method-extended bool isHidden()
 * @method bool isVisible()
 * @method-extended bool isVisible()
 * @method null|\PlaywrightPhp\Resources\Frame ownerFrame()
 * @method-extended null|\PlaywrightPhp\Resources\Frame ownerFrame()
 * @method void press(string $key, array $options = [])
 * @method-extended void press(string $key, array{ $delay: float, $noWaitAfter: bool, $timeout: float } $options = null)
 * @method mixed screenshot(array $options = [])
 * @method-extended mixed screenshot(array{ $animations: string, $caret: string, $mask: mixed, $maskColor: string, $omitBackground: bool, $path: string, $quality: float, $scale: string, $style: string, $timeout: float, $type: string } $options = null)
 * @method void scrollIntoViewIfNeeded(array $options = [])
 * @method-extended void scrollIntoViewIfNeeded(array{ $timeout: float } $options = null)
 * @method mixed selectOption(null|string|\PlaywrightPhp\Resources\ElementHandle|mixed|array $values, array $options = [])
 * @method-extended mixed selectOption(null|string|\PlaywrightPhp\Resources\ElementHandle|mixed|array{ $value: string, $label: string, $index: float } $values, array{ $force: bool, $noWaitAfter: bool, $timeout: float } $options = null)
 * @method void selectText(array $options = [])
 * @method-extended void selectText(array{ $force: bool, $timeout: float } $options = null)
 * @method void setChecked(bool $checked, array $options = [])
 * @method-extended void setChecked(bool $checked, array{ $force: bool, $noWaitAfter: bool, $position: array{ $x: float, $y: float }, $timeout: float, $trial: bool } $options = null)
 * @method void setInputFiles(string|mixed|array $files, array $options = [])
 * @method-extended void setInputFiles(string|mixed|array{ $name: string, $mimeType: string, $buffer: mixed } $files, array{ $noWaitAfter: bool, $timeout: float } $options = null)
 * @method void tap(array $options = [])
 * @method-extended void tap(array{ $force: bool, $modifiers: mixed, $noWaitAfter: bool, $position: array{ $x: float, $y: float }, $timeout: float, $trial: bool } $options = null)
 * @method null|string textContent()
 * @method-extended null|string textContent()
 * @method void type(string $text, array $options = [])
 * @method-extended void type(string $text, array{ $delay: float, $noWaitAfter: bool, $timeout: float } $options = null)
 * @method void uncheck(array $options = [])
 * @method-extended void uncheck(array{ $force: bool, $noWaitAfter: bool, $position: array{ $x: float, $y: float }, $timeout: float, $trial: bool } $options = null)
 * @method void waitForElementState(string $state, array $options = [])
 * @method-extended void waitForElementState(string $state, array{ $timeout: float } $options = null)
 */
class ElementHandle extends JSHandle
{
    use AliasesEvaluationMethods;
    use AliasesSelectionMethods;
}
